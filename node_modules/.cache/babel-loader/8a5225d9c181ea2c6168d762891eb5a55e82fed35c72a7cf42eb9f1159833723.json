{"ast":null,"code":"var _jsxFileName = \"/Users/kieranbondy/Desktop/wordbridgev2/src/components/Game/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from '../board/Board';\nimport LetterTray from '../LetterTray/LetterTray';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  //States: Tracking mouse data and overall game data\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n    letter: ''\n  });\n  const [gameData, setGameData] = useState({\n    board: [[0, 1, 0, 0, 1, 0], [0, 'e', 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]],\n    tray: ['a', 'c', 'b', 'c']\n  });\n\n  //Getting the closest spaces to dropped tile and returning if it is within range\n  function getClosest(x, y) {\n    const elements = document.querySelectorAll('[id*=\"play\"], [id*=\"tile\"]'); // Get elements with IDs containing \"play\"\n    let closestElement = null;\n    let minDistance = Infinity;\n    elements.forEach(element => {\n      const rect = element.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const distance = Math.sqrt((centerX - x) ** 2 + (centerY - y) ** 2);\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestElement = element;\n      }\n    });\n\n    //Checking within range\n    if (minDistance > 25) {\n      return \"failure,failure\";\n    }\n    return closestElement.id;\n  }\n\n  //Triggers when a letter is dropped and updates game states\n  useEffect(() => {\n    const id = getClosest(mousePosition.x, mousePosition.y);\n    console.log(id);\n    // if(id[0] !== \"failure\"){\n    //     const [letter,trayIndex,extra] = mousePosition.letter.split('_')\n    //     const y = parseInt(id[0])\n    //     const x = parseInt(id[1].split(\"_\")[0])\n    //     // //Placing letter on game board\n    //     // setGameData((prevData) =>{\n    //     //     const updatedBoard = [...prevData.board];\n    //     //     const updatedTray = [...prevData.tray];\n    //     //     updatedBoard[y][x] = letter;\n    //     //     updatedTray.splice(parseInt(trayIndex), 1)\n    //     //     console.log(updatedTray)\n    //     //     return { ...prevData, board: updatedBoard, tray: updatedTray };\n    //     // })\n    // }\n  }, [mousePosition]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: gameData.board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(LetterTray, {\n        isMouseDown: isMouseDown,\n        setIsMouseDown: setIsMouseDown,\n        setMousePosition: setMousePosition,\n        letters: gameData.tray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"J/GXCec65bRcDDz0uBU0fRioKi0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Board","LetterTray","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","isMouseDown","setIsMouseDown","mousePosition","setMousePosition","x","y","letter","gameData","setGameData","board","tray","getClosest","elements","document","querySelectorAll","closestElement","minDistance","Infinity","forEach","element","rect","getBoundingClientRect","centerX","left","width","centerY","top","height","distance","Math","sqrt","id","console","log","children","className","data","fileName","_jsxFileName","lineNumber","columnNumber","letters","_c","$RefreshReg$"],"sources":["/Users/kieranbondy/Desktop/wordbridgev2/src/components/Game/Game.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Board from '../board/Board'\nimport LetterTray from '../LetterTray/LetterTray'\nimport './Game.css'\n\nexport default function Game() {\n    //States: Tracking mouse data and overall game data\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [mousePosition, setMousePosition] = useState({x: 0, y: 0, letter:''})\n    const [gameData, setGameData] = useState({board:[[0,1,0, 0,1,0],[0,'e',0, 0,1,0],[0,0,0, 0,1,0]],tray:['a','c','b','c']})\n    \n    //Getting the closest spaces to dropped tile and returning if it is within range\n    function getClosest(x, y) {\n        const elements = document.querySelectorAll('[id*=\"play\"], [id*=\"tile\"]'); // Get elements with IDs containing \"play\"\n        let closestElement = null;\n        let minDistance = Infinity;\n      \n        elements.forEach((element) => {\n          const rect = element.getBoundingClientRect();\n          const centerX = rect.left + rect.width / 2;\n          const centerY = rect.top + rect.height / 2;\n      \n          const distance = Math.sqrt((centerX - x) ** 2 + (centerY - y) ** 2);\n      \n          if (distance < minDistance) {\n            minDistance = distance;\n            closestElement = element;\n          }\n        });\n\n        //Checking within range\n        if(minDistance > 25){\n            return \"failure,failure\"\n        }\n        return closestElement.id;\n      }\n    \n    //Triggers when a letter is dropped and updates game states\n    useEffect(()=>{\n        const id=getClosest(mousePosition.x, mousePosition.y)\n        console.log(id)\n        // if(id[0] !== \"failure\"){\n        //     const [letter,trayIndex,extra] = mousePosition.letter.split('_')\n        //     const y = parseInt(id[0])\n        //     const x = parseInt(id[1].split(\"_\")[0])\n        //     // //Placing letter on game board\n        //     // setGameData((prevData) =>{\n        //     //     const updatedBoard = [...prevData.board];\n        //     //     const updatedTray = [...prevData.tray];\n        //     //     updatedBoard[y][x] = letter;\n        //     //     updatedTray.splice(parseInt(trayIndex), 1)\n        //     //     console.log(updatedTray)\n        //     //     return { ...prevData, board: updatedBoard, tray: updatedTray };\n        //     // })\n        // }\n    },[mousePosition])\n\n  return (\n    <> \n    <div className='board-container'>\n        <Board data={gameData.board}></Board>\n    </div>\n    <div className='board-container'>\n        <LetterTray isMouseDown={isMouseDown} setIsMouseDown={setIsMouseDown} setMousePosition={setMousePosition} letters={gameData.tray}></LetterTray>\n    </div>\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
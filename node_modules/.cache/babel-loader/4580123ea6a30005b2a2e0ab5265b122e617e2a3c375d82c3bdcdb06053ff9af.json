{"ast":null,"code":"var _jsxFileName = \"/Users/kieranbondy/Desktop/wordbridgev2/src/components/Game/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from '../board/Board';\nimport LetterTray from '../LetterTray/LetterTray';\nimport './Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  //States: Tracking mouse data and overall game data\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n    letter: ''\n  });\n  const [gameData, setGameData] = useState({\n    board: [[0, 1, 0, 0, 1, 0], [0, 'e', 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]],\n    tray: ['a', 'c', 'b', 'c']\n  });\n\n  //Getting the closest spaces to dropped tile and returning if it is within range\n  function getClosest(x, y) {\n    const elements = document.querySelectorAll('[id*=\"play\"], [id*=\"tile\"]'); // Get elements with IDs containing \"play\"\n    let closestElement = null;\n    let minDistance = Infinity;\n    elements.forEach(element => {\n      if (element.id != mousePosition.letter) {\n        const rect = element.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        const distance = Math.sqrt((centerX - x) ** 2 + (centerY - y) ** 2);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestElement = element;\n        }\n      }\n    });\n\n    //Checking within range\n    if (minDistance > 25) {\n      return \"failure_failure_failure\";\n    }\n    return closestElement.id;\n  }\n\n  //Triggers when a letter is dropped and updates game states\n  useEffect(() => {\n    const [first, second, type] = getClosest(mousePosition.x, mousePosition.y).split('_');\n    if (type !== \"failure\") {\n      const [letter, trayIndex, extra] = mousePosition.letter.split('_');\n      if (type === 'play') {\n        //Placing letter on game board\n        setGameData(prevData => {\n          const updatedBoard = [...prevData.board];\n          const updatedTray = [...prevData.tray];\n          updatedBoard[first][second] = letter;\n          updatedTray.splice(parseInt(trayIndex), 1);\n          console.log(updatedTray);\n          return {\n            ...prevData,\n            board: updatedBoard,\n            tray: updatedTray\n          };\n        });\n      } else if (type === 'tile') {\n        setGameData(prevData => {\n          const updatedTray = [...prevData.tray]; // Create a copy of the original array\n          console.log(first, second, trayIndex)\n          // const index1 = parseInt(trayIndex)\n          // const index2 = parseInt(second)\n          [(updatedTray[parseInt(trayIndex)], updatedTray[parseInt(second)])] = [updatedTray[parseInt(second)], updatedTray[parseInt(trayIndex)]];\n          return {\n            ...prevData,\n            tray: updatedTray\n          };\n        });\n      }\n    }\n  }, [mousePosition]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: gameData.board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: /*#__PURE__*/_jsxDEV(LetterTray, {\n        isMouseDown: isMouseDown,\n        setIsMouseDown: setIsMouseDown,\n        setMousePosition: setMousePosition,\n        letters: gameData.tray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"J/GXCec65bRcDDz0uBU0fRioKi0=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Board","LetterTray","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","isMouseDown","setIsMouseDown","mousePosition","setMousePosition","x","y","letter","gameData","setGameData","board","tray","getClosest","elements","document","querySelectorAll","closestElement","minDistance","Infinity","forEach","element","id","rect","getBoundingClientRect","centerX","left","width","centerY","top","height","distance","Math","sqrt","first","second","type","split","trayIndex","extra","prevData","updatedBoard","updatedTray","splice","parseInt","console","log","children","className","data","fileName","_jsxFileName","lineNumber","columnNumber","letters","_c","$RefreshReg$"],"sources":["/Users/kieranbondy/Desktop/wordbridgev2/src/components/Game/Game.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Board from '../board/Board'\nimport LetterTray from '../LetterTray/LetterTray'\nimport './Game.css'\n\nexport default function Game() {\n    //States: Tracking mouse data and overall game data\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [mousePosition, setMousePosition] = useState({x: 0, y: 0, letter:''})\n    const [gameData, setGameData] = useState({board:[[0,1,0, 0,1,0],[0,'e',0, 0,1,0],[0,0,0, 0,1,0]],tray:['a','c','b','c']})\n    \n    //Getting the closest spaces to dropped tile and returning if it is within range\n    function getClosest(x, y) {\n        const elements = document.querySelectorAll('[id*=\"play\"], [id*=\"tile\"]'); // Get elements with IDs containing \"play\"\n        let closestElement = null;\n        let minDistance = Infinity;\n      \n        elements.forEach((element) => {\n            if(element.id != mousePosition.letter){\n          const rect = element.getBoundingClientRect();\n          const centerX = rect.left + rect.width / 2;\n          const centerY = rect.top + rect.height / 2;\n      \n          const distance = Math.sqrt((centerX - x) ** 2 + (centerY - y) ** 2);\n      \n          if (distance < minDistance) {\n            minDistance = distance;\n            closestElement = element;\n          }\n        }\n        });\n\n        //Checking within range\n        if(minDistance > 25){\n            return \"failure_failure_failure\"\n        }\n        return closestElement.id;\n      }\n    \n    //Triggers when a letter is dropped and updates game states\n    useEffect(()=>{\n        const [first,second,type]=getClosest(mousePosition.x, mousePosition.y).split('_')\n        if(type !== \"failure\"){\n            const [letter,trayIndex,extra] = mousePosition.letter.split('_')\n            if(type === 'play'){\n                //Placing letter on game board\n                setGameData((prevData) =>{\n                    const updatedBoard = [...prevData.board];\n                    const updatedTray = [...prevData.tray];\n                    updatedBoard[first][second] = letter;\n                    updatedTray.splice(parseInt(trayIndex), 1)\n                    console.log(updatedTray)\n                    return { ...prevData, board: updatedBoard, tray: updatedTray };\n                })\n            } else if(type === 'tile'){\n                setGameData((prevData) => {\n                    const updatedTray = [...prevData.tray]; // Create a copy of the original array\n                    console.log(first,second,trayIndex)\n                    // const index1 = parseInt(trayIndex)\n                    // const index2 = parseInt(second)\n                    [updatedTray[parseInt(trayIndex)], updatedTray[parseInt(second)]] = [updatedTray[parseInt(second)], updatedTray[parseInt(trayIndex)]];\n                    return { ...prevData, tray: updatedTray}\n                })\n            }\n            \n        }\n    },[mousePosition])\n\n  return (\n    <> \n    <div className='board-container'>\n        <Board data={gameData.board}></Board>\n    </div>\n    <div className='board-container'>\n        <LetterTray isMouseDown={isMouseDown} setIsMouseDown={setIsMouseDown} setMousePosition={setMousePosition} letters={gameData.tray}></LetterTray>\n    </div>\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}